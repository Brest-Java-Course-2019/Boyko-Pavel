
subject.selectAllSubject = SELECT subject_id, subject_name FROM subject
subject.selectBySubjectId = SELECT subject_id, subject_name FROM subject WHERE subject_id = :subject_id
subject.insertSubject = INSERT into subject (subject_name) VALUES (:subject_name)
subject.updateSubject = UPDATE subject SET subject_name = :subject_name where subject_id = :subject_id
subject.deleteSubject = DELETE FROM subject WHERE subject_id = :subject_id

subject.checkSubjectName = SELECT count(subject_id) FROM subject WHERE lower(subject_name) = lower(:subject_name)


studentAnswer.studentAnswerByIdStudent = SELECT test_id, question_item_id, student_answer FROM student_answer WHERE student_id = :student_id
studentAnswer.addStudentAnswer = INSERT INTO student_answer (test_id, student_id, question_item_id, student_answer) VALUES (:test_id, :student_id, :question_item_id, :student_answer)



test.selectAllTest = SELECT test_id, name, teacher_id, subject_id FROM test WHERE deleted = 0
test.selectTestByID = SELECT test_id, name, teacher_id, subject_id FROM test WHERE test_id = :test_id AND deleted = 0
test.insertTest = INSERT INTO test (name, teacher_id, subject_id) VALUES (:name, :teacher_id, :subject_id)
#test.existTest = SELECT COUNT(q.question_id) FROM question q WHERE q.question_id = :question_id AND q.deleted = 0
test.updateTest = UPDATE test SET name = :name, subject_id = :subject_id WHERE test_id = :test_id AND deleted = 0
test.deleteTest = UPDATE test SET deleted = 1 WHERE test_id = :test_id

test.selectTestDTOByID = SELECT t.test_id, t.name, t.teacher_id, s.subject_name, s.subject_id FROM test t \
  JOIN subject s ON (s.subject_id =  t.subject_id AND t.deleted = 0 AND t.test_id = :test_id)


questionItem.selectAllQuestionItem = SELECT question_item_id, description, question_id, answer FROM question_item WHERE deleted = 0
questionItem.selectByQuestionItem = SELECT question_item_id, description, question_id, answer FROM question_item WHERE question_item_id = :question_item_id AND deleted = 0 
questionItem.selectAllQuestionItemByTestId = SELECT qi.question_item_id, qi.description, qi.question_id, qi.answer FROM question_item qi \
JOIN question q ON (q.test_id = :test_id AND q.question_id = qi.question_id AND qi.deleted =0 and q.deleted = 0) ORDER BY qi.question_item_id
#  JOIN question_id = :question_id AND deleted = 0
#  WHERE question_id = :question_id AND deleted = 0

questionItem.insertQuestionItem = INSERT into question_item (description, question_id, answer) VALUES (:description, :question_id, :answer)
#questionItem.existQuestionById = SELECT COUNT(q.question_id) FROM question q WHERE q.question_id = :question_id AND q.deleted = 0
questionItem.updateQuestionItem = UPDATE question_item SET description = :description, answer=:answer WHERE question_item_id = :question_item_id AND deleted = 0
#questionItem.deleteQuestionItem = UPDATE question_item SET deleted = 1 WHERE question_item_id = :question_item_id

questionItem.deleteQuestionItem = UPDATE question_item qi SET qi.deleted = 1 \
 WHERE qi.question_id IN (SELECT question_id FROM question q WHERE q.test_id = :test_id)



question.selectAllQuestion = SELECT q.question_id, q.question, q.test_id FROM question q WHERE deleted = 0
question.selectQuestionById = SELECT q.question_id, q.question, q.test_id FROM question q WHERE question_id = :question_id AND deleted = 0
question.selectAllQuestionByTestId = SELECT question_id, question, test_id FROM question WHERE test_id = :test_id AND deleted = 0 ORDER BY question_id
question.insertQuestion = INSERT INTO question (question, test_id) VALUES (:question, :test_id)
#question.existTestById = SELECT COUNT(test_id) FROM test WHERE test_id = :test_id AND deleted = 0
question.updateQuestion = UPDATE question SET question=:question WHERE question_id = :question_id
question.deleteQuestionByTestId = UPDATE question SET deleted = 1 WHERE question_id = :test_id


#question.butchUpdateQuestion = CREATE LOCAL TEMPORARY  TABLE IF NOT EXISTS questionTem \
#  (question_id INT, question VARCHAR(200), test_id INT); \
#  INSERT INTO  questionTem (question_id, question, test_id)  VALUES (:question_id, :question, :test_id); \
#  MERGE INTO question AS q \
#  USING  questionTem AS t ON (q.question_id = t.question_id) \
#  WHEN MATCHED THEN \
#UPDATE SET q.question = t.question, q.test_id = t.test_id

#
#question.butchUpdateQuestion2 = UPDATE question SET question_id = :question_id, question=:question WHERE question_id = :question_id

studentTestDTO.filterByDate = SELECT s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id, count(q.question_id) AS countQuestions FROM subject s \
JOIN test t ON (t.subject_id =  s.subject_id and t.deleted = 0 and t.created_at BETWEEN :startDate AND :endDate) \
JOIN question q ON (q.test_id =  t.test_id and  q.deleted = 0) \
GROUP BY s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id ORDER BY t.test_id


studentTestDTO.filterNotDoneTestByDate = SELECT s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id, count(q.question_id) AS countQuestions FROM subject s \
JOIN test t ON (t.subject_id =  s.subject_id and t.deleted = 0 and t.created_at BETWEEN :startDate AND :endDate and t.test_id not in(select distinct sa.test_id from student_answer sa where sa.student_id = :student_id or sa.student_id = null)) \
JOIN question q ON (q.test_id =  t.test_id and  q.deleted = 0) \
GROUP BY s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id ORDER BY t.test_id

studentTestDTO.findAllDTO = SELECT s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id, count(q.question_id) AS countQuestions FROM subject s \
JOIN test t ON (t.subject_id =  s.subject_id and t.deleted = 0) \
JOIN question q ON (q.test_id =  t.test_id and  q.deleted = 0) \
GROUP BY s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id ORDER BY t.test_id

studentTestDTO.findAllDtoTestStudentId = SELECT   s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id, count(q.question_id) AS countQuestions FROM subject s \
JOIN test t ON (t.subject_id =  s.subject_id and t.deleted = 0 and t.test_id not in(select distinct sa.test_id from student_answer sa where sa.student_id = :student_id or sa.student_id = null)) \
JOIN question q ON (q.test_id =  t.test_id and  q.deleted = 0) \
GROUP BY s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id ORDER BY t.test_id

teacher.findAllTestDtoTeacher = SELECT s.subject_name, t.name, t.created_at, t.test_id, t.teacher_id, count(q.question_id) AS countQuestions FROM subject s \
JOIN test t ON (t.subject_id =  s.subject_id and t.deleted = 0 and t.teacher_id = :teacher_id) \
JOIN question q ON (q.test_id =  t.test_id and  q.deleted = 0) \
GROUP BY s.subject_name, t.test_id, t.name, t.created_at, t.teacher_id ORDER BY t.test_id

teacher.findAllTeacherByLogin = SELECT teacher_id, login, name, surname, password \
FROM teacher WHERE login =:login


#studentTestDTO.findAllDtoTeacher = SELECT s.subject_name, t.test_id, t.name, t.created_at, count(q.question_id) AS countQuestions FROM teacher te \
#JOIN test t ON (t.subject_id =  s.subject_id and t.deleted = 0 and  te.teacher_id = t.teacher_id) \
#JOIN subject s ON (t.subject_id =  s.subject_id and t.deleted = 0) \
#JOIN question q ON (q.test_id =  t.test_id and  q.deleted = 0) \
#GROUP BY t.test_id, s.subject_name, t.name, t.created_at

teacher.checkPasswordLogin = SELECT t.teacher_id FROM teacher t WHERE \
  (t.password = :password and t.login = :login)

#nal String CHECK_COUNT_NAME = "select count(departmentId) from department where lower(departmentName) = lower(:departmentName)";


student.selectAllStudent = SELECT student_id, name, surname, login, password FROM student
student.selectByStudentLogin = SELECT student_id, name, login , password surname FROM student WHERE login = :login
student.insertStudent = INSERT INTO student (name, surname, login, password) VALUES (:name, :surname, :login, :password)

#student.updateStudent = UPDATE student SET name = :name, surname = :surname \
#  WHERE student_id = :student_id
#student.deleteStudent = DELETE FROM student WHERE student_id = :student_id

#public static final String SELECT_ALL_STUBS = "SELECT d.departmentId, d.departmentName, IFNULL (avg(e.salary),0) AS AvgSalary" +
#" FROM department d " +
#" LEFT JOIN employee e ON (d.departmentId = e.departmentId)" +
#" GROUP BY d.departmentId, d.departmentName";
#newTesting.selectAllNewTestDTO = \
# SELECT t.tests_id, s.name, t.test_name, q.questionName, i.question_item, a.answer \
# FROM right_answer a \
# INNER JOIN question_item i ON (a.question_item_id =  i.question_item_id) \
# INNER JOIN questionName q ON (a.question_id =  q.question_id) \
# INNER JOIN subject s ON (s.subject_id =  q.subject_id) \
# INNER JOIN test t ON (s.subject_id  =  t.subject_id)




#test.selectAllTest = SELECT t.test_id, t.name, t.teacher_id, s.subject_name FROM test t \
#  JOIN subject s ON (s.subject_id =  t.subject_id and t.deleted = 0)
#test.selectByTest = SELECT t.test_id, t.name, t.teacher_id, s.subject_name FROM test t \
#  JOIN subject s ON (s.subject_id =  t.subject_id AND t.deleted = 0 AND t.test_id = :test_id)


#procedure.findAllDTO = SELECT qi.deleted AS questions FROM \
#  question q WHERE (q.test_id =  idTest and q.deleted = 0) \
#JOIN question_item qi ON (qi.question_id =  q.question_id and  qi.deleted = 0)

#delete.allTestDto = UPDATE test SET deleted = 1 WHERE test_id = :test_id;
#  UPDATE question SET deleted = 1 WHERE test_id = :test_i`d;







#transaction.deleteTestDto = start  SAVEPOINT transaction \
#  UPDATE test SET deleted = 1 WHERE test_id = :test_id \
#UPDATE question SET deleted = 1 WHERE question_id = :test_id;\
#rollback;